@startuml
' !theme materia-outline

title raft Example Flow Chart

participant node1 as n1 #Red
participant node2 as n2 #Yellow
participant node3 as n3 #Green

group main.main()
    n1 -> n1: main.main()

    group newRaftNode()
        n1 -> n1: commitC := make(chan *string)
        n1 -> n1: errorC := make(chan error)
        note left: 创建 commitC、errorC channel
        n1 -> n1: &raftNode{}
        note left: 初始化 raftNode 部分字段
        n1 -> n1: go rc.startRaft()
        note left: 启动协程以执行 startRaft()，在其中完成剩余初始化操作
        return commitC, errorC, rc.snapshotterReady

        group raftNode.startRaft()
            n1 -> n1: !fileutil.Exist(rc.snapdir)
            note left: 判断 snapdir 是否存在，不存在则创建

            n1 -> n1: snap.New(zap.NewExample(), rc.snapdir)
            n1 -> n1: rc.snapshotterReady <- rc.snapshotter
            note left: 创建 Snapshotter 实例，并将 Snapshotter 实例通过 snapshotterReady 通道返回给上层应用

            n1 -> n1: rc.replayWAL()
            note left:创建 WAL 实例，加载快照并回放 WAL 日志
            group raftNode.replayWAL()
                n1 -> n1: snapshot := rc.loadSnapshot()
                note left: 读取快照
                return snapshot

                n1 -> n1: w := rc.openWAL(snapshot)
                note left: 根据读取到的 snapshot 实例元数据构建 WAL 实例

                n1 -> n1: _, st, ents, err := w.ReadAll()
                note left: 读取快照信息之后的 wal 日志，并获取状态信息

                n1 -> n1: rc.raftStorage = raft.NewMemoryStorage()
                note left: 创建持久化存储实例 MemoryStorage

                alt snapshot != nil 
                    n1 -> n1: rc.raftStorage.ApplySnapshot(*snapshot)
                    note left: 加载快照数据到 MemoryStorage 中
                end

                n1 -> n1: rc.raftStorage.SetHardState(st)
                note left: 将读取 wal 日志后得到的 HardState 加载到 MemoryStorage 中

                n1 -> n1: rc.raftStorage.Append(ents)
                note left: 将读取 wal 日志中的 ents 追加到 MemoryStorage 中，这样 raft 将在正确的日志位置开始

                alt 快照之后 ents 存在
                    n1 -> n1: rc.lastIndex = ents[len(ents)-1].Index
                    note left: 更新 raft.lastIndex，记录回放结束位置
                else 快照之后 ents 不存在
                    n1 -> n1: rc.commitC <- nil
                    note left: 向 commitC 中写入 nil 作为信号
                end
            end

            n1 -> n1: &raft.Config{}
            note left: 创建 raft.Config 实例，用于启动 raftNode
            alt wal 文件存在
                n1 -> n1: rc.node = raft.RestartNode(c)
                note left: 重启节点
            else wal 文件不存在，新 raftNode
                n1 -> n1: raft.StartNode(c, startPeers)
                note left: 初始化底层 etcd-raft 模块，初次启动
            end

            n1 -> n1: &rafthttp.Transport{}
            n1 -> n1: rc.transport.Start()
            note left: 创建 transport 实例并启动，该实例负责集群中各个节点之间的网络通信

            n1 -> n1: rc.transport.AddPeer(types.ID(i+1), []string{rc.peers[i]})
            note left: 建立与集群其它节点的连接

            n1 -> n1: go rc.serveRaft()
            note left: 启动协程以监听当前节点与集群中其它节点之间的网络连接
            group rc.serveRaft()
                n1 -> n1: (&http.Server{Handler: rc.transport.Handler()}).Serve(ln)
                note left: 创建 http.Server 实例，并提供服务
            end

            n1 -> n1: go rc.serveChannels()
            note left: 启动协程以处理上层应用与底层 etcd-raft 模块的交互
            group rc.serveChannels()
                n1 -> n1:
                note left: 
            end
        end
    end
end

@enduml